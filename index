<!DOCTYPE html>
<html>

	<head>
		<meta charset="utf-8">
		<title>layui</title>
		<meta name="renderer" content="webkit">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<link rel="stylesheet" href="css/layui.css" media="all">
		<!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 -->
		<style type="text/css">
			.sex {
				border: none;
				width: 90%;
				height: 80%;
			}
		</style>
	</head>

	<body>

		<button class="layui-btn" id="getCheckedData">获得表格选中行</button>
		<div id="grid" lay-filter="grid"></div>

		<script src="layui.js" charset="utf-8"></script>
		<!-- 注意：如果你直接复制所有代码到本地，上述js路径需要改成你本地的 -->
		<!--<script src="table.js"></script>-->
		<script>
			layui.use(['table', 'layer', 'element', 'jquery', 'form', 'laydate'], function(table, layer, element, $, form, laydate) {
				var jsonData = [{
					id: 1,
					city: 1,
					date: '2018-09-09'
				}, {
					id: 2,
					city: 0,
					date: '2018-09-09'
				}, {
					id: 3,
					city: 0,
					date: '2018-09-09'
				}, {
					id: 4,
					city: 1,
					date: '2018-09-09'
				}, {
					id: 5,
					city: 1,
					date: '2018-09-09'
				}];

				// 监听修改update到表格中
				form.on('select(testSelect)', function(data) {
					//					debugger;
					console.log(data)
					var elem = $(data.elem);
					var trElem = elem.parents('tr');
					var tableData = table.cache['grid'];
					// 更新到表格的缓存数据中，才能在获得选中行等等其他的方法中得到更新之后的值
					tableData[trElem.data('index')][elem.attr('name')] = data.value;
					// 其他的操作看需求 TODO
				});
				//				layui.onevent()

				$('#getCheckedData').click(function() {
					// 验证一下下拉选择之后有没有作用到表格缓存数据
					var checkStatus = table.checkStatus('grid'); //test即为基础参数id对应的值
										console.log(checkStatus)
				});
				var tableIns = table.render({
					elem: '#grid',
					data: jsonData,
					size: 'lg',
					cols: [
						[ //表头
							{
								type: 'checkbox',
								fixed: true
							},
							{
								field: 'id',
								title: 'ID',
								sort: true,
								edit: true
							},
							{
								field: 'city',
								title: '男性',
								align: 'center',
								templet: function(d) {
									// 模板的实现方式也是多种多样，这里简单返回固定的
									return '<select name="city" class="sex" lay-filter="testSelect" lay-verify="required" data-value="' + d.city + '" >\n' +
										'        <option value="0">是</option>\n' +
										'        <option value="1">否</option>\n' +
										'      </select>';
								}
							},
							{
								field: 'date',
								title: '日期',
								sort: true,
								templet: function(d) {
									//									 模板的实现方式也是多种多样，这里简单返回固定的
									//									return '<div class="box-date"><input type="text"  class="layui-input dateSet' + d.LAY_INDEX + '"/></div>';
									return '<input class="date-box dateSet' + d.LAY_INDEX + '" lay-filter="boxDate" data-value="' + d.date + '" value="' + d.date + '" />';
								}
							}
						]
					],
					done: function(res, curr, count) {
						console.log(res)
						console.log(curr)
						count || this.elem.next('.layui-table-view').find('.layui-table-header').css('overflow', 'auto');
						layui.each($('select'), function(index, item) {
							var elem = $(item);
							elem.val(elem.data('value')).parents('div.layui-table-cell').css('overflow', 'visible');
						});
						//						console.log(this)
						var targetCss = $('.sex')
						for(var i = 0; i < targetCss.length; i++) {
							var _this = targetCss.eq(i)
							for(var z = 0; z < _this.find('option').length; z++) {
								if(_this.attr('data-value') === _this.find('option').eq(z).prop('value')) {
									_this.find('option').eq(z).attr('selected', 'selected')
								}
							}
						}
						for(var t = 0; t < targetCss.length; t++) {
							laydate.render({
								elem: ".dateSet" + t,
								done: function(data) {
									console.log(data)
									var elem = $(this.elem);
									var trElem = elem.parents('tr');
									var tableData = table.cache['grid'];
									// 更新到表格的缓存数据中，才能在获得选中行等等其他的方法中得到更新之后的值
									tableData[trElem.data('index')]['date'] = data;
								}
							})
						}
						form.render()
					}
				});
				table.on('sort(grid)', function(obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
					console.log(obj); //当前排序的字段名

					//尽管我们的 table 自带排序功能，但并没有请求服务端。
					//有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
					table.reload('grid', {
						initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。 layui 2.1.1 新增参数
							,
						where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
							field: [obj.id, obj.date] //排序字段
								,
							order: obj.type //排序方式
						}
					});

				});
			});
		</script>

	</body>

</html>
